{"version":3,"sources":["components/Game.tsx","data/BoardData.ts","components/BoardItem.tsx","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Game","children","className","BoardData","value","front","type","found","BoardItem","item","onClick","title","Board","useState","board","setIndexOne","setIndexTwo","selectedValueOne","setSelectedValueOne","selectedValueTwo","setSelectedValueTwo","reset","console","log","map","data","i","key","index","e","currentTarget","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8NAMaA,G,WAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAA6B,uBAAKC,UAAU,QAAQD,K,OCN3DE,EAAY,CACtB,CAAEC,MAAO,SAAUC,MAAO,IAAKC,KAAM,QAASC,OAAO,GACrD,CAAEH,MAAO,SAAUC,MAAO,IAAKC,KAAM,WAAYC,OAAO,GACxD,CAAEH,MAAO,MAAOC,MAAO,IAAKC,KAAM,SAAUC,OAAO,GACnD,CAAEH,MAAO,MAAOC,MAAO,IAAKC,KAAM,QAASC,OAAO,GAClD,CAAEH,MAAO,MAAOC,MAAO,IAAKC,KAAM,WAAYC,OAAO,GACrD,CAAEH,MAAO,MAAOC,MAAO,IAAKC,KAAM,SAAUC,OAAO,GACnD,CAAEH,MAAO,SAAUC,MAAO,IAAKC,KAAM,SAAUC,OAAO,GACtD,CAAEH,MAAO,SAAUC,MAAO,IAAKC,KAAM,SAAUC,OAAO,GACtD,CAAEH,MAAO,QAASC,MAAO,IAAKC,KAAM,SAAUC,OAAO,GACrD,CAAEH,MAAO,QAASC,MAAO,IAAKC,KAAM,QAASC,OAAO,ICE1CC,EAAY,SAAC,GAAD,IAAGD,EAAH,EAAGA,MAAOE,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,QAAhB,OACtB,uBACGR,UAAS,UAAKO,EAAKL,MAAV,uBAA8BG,EAAQ,QAAU,IACzDG,QAASA,EACTC,MAAOF,EAAKL,OAEXK,EAAKJ,MACLI,EAAKH,KACLG,EAAKL,QCTCQ,EAAQ,SAAC,GAA8B,IAA5BX,EAA2B,EAA3BA,SAA2B,EACtBY,mBAAcV,GADQ,mBACzCW,EADyC,aAEhBD,mBAAwB,OAFR,mBAE/BE,GAF+B,aAGhBF,mBAAwB,MAHR,mBAG/BG,GAH+B,aAIAH,mBAAiB,IAJjB,mBAIzCI,EAJyC,KAIvBC,EAJuB,OAKAL,mBAAiB,IALjB,mBAKzCM,EALyC,KAKvBC,EALuB,KAuB1CC,EAAQ,WACXN,EAAY,MACZC,EAAY,MACZE,EAAoB,IACpBE,EAAoB,KAcvB,OAXIH,GAAoBE,IACRF,IAAkBE,GAE5BG,QAAQC,IAAI,SACZF,MAEAC,QAAQC,IAAI,YACZF,MAKH,uBAAKnB,UAAU,SACXD,GAAsB,KACtBa,EAAMU,KAAK,SAACC,EAAWC,GAAZ,OACT,gBAAC,EAAD,CACGnB,MAAOkB,EAAKlB,MACZE,KAAMgB,EACNE,IAAG,qBAAgBD,GACnBhB,SA1CYkB,EA0CYF,EA1CM,SAACG,GACxC,IAAMzB,EAAQyB,EAAEC,cAAc5B,UAAU,GAGxC,OAFAoB,QAAQC,IAAInB,EAAOwB,GAEdX,EAKAE,OAAL,GACGC,EAAoBhB,QACpBY,EAAYY,KANZV,EAAoBd,QACpBW,EAAYa,QANK,IAACA,OCHZG,MAVf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCGY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.d1bcbf0f.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype GameProps = {\n   children: React.ReactChild;\n}\n\nexport const Game = ({ children }: GameProps) => <div className=\"game\">{children}</div>\n","export const BoardData = [\n   { value: 'rabbit', front: '9', type: 'clubs', found: false },\n   { value: 'rabbit', front: '2', type: 'diamonds', found: false },\n   { value: 'cat', front: 'Q', type: 'hearts', found: false },\n   { value: 'cat', front: '3', type: 'clubs', found: false },\n   { value: 'dog', front: 'A', type: 'diamonds', found: false },\n   { value: 'dog', front: '7', type: 'hearts', found: false },\n   { value: 'monkee', front: '7', type: 'spades', found: false },\n   { value: 'monkee', front: '6', type: 'hearts', found: false },\n   { value: 'whale', front: '7', type: 'spades', found: false },\n   { value: 'whale', front: 'J', type: 'clubs', found: false }\n]","import * as React from 'react';\n\ntype BoardItemProps = {\n   found?: boolean | null;\n   item: {\n      front: string,\n      type: string,\n      value: string\n   },\n   onClick: (e: React.SyntheticEvent) => void;\n}\n\nexport const BoardItem = ({ found, item, onClick }: BoardItemProps) => (\n   <div\n      className={`${item.value} board-item ${found ? 'found' : ''}`}\n      onClick={onClick}\n      title={item.value}\n   >\n      {item.front}\n      {item.type}\n      {item.value}\n   </div>\n);\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { BoardData } from '../data/BoardData';\nimport { BoardItem } from './BoardItem';\n\ntype BoardProps = {\n   children? : React.ReactChild;\n};\n\nconst hasMatch = (s1: string, s2: string): boolean => s1 === s2;\n\nexport const Board = ({ children }: BoardProps) => {\n   const [board, setBoard] = useState<any>(BoardData);\n   const [indexOne, setIndexOne] = useState<number | null>(null);\n   const [indexTwo, setIndexTwo] = useState<number | null>(null);\n   const [selectedValueOne, setSelectedValueOne] = useState<string>('');\n   const [selectedValueTwo, setSelectedValueTwo] = useState<string>('');\n\n   const onClickHandler = (index: number) => (e: React.SyntheticEvent) => {\n      const value = e.currentTarget.className[0];\n      console.log(value, index);\n\n      if (!selectedValueOne) { \n         setSelectedValueOne(value);\n         setIndexOne(index);\n         return; \n      }\n      if (!selectedValueTwo) { \n         setSelectedValueTwo(value);\n         setIndexTwo(index);\n         return;\n      }\n   }\n\n   const reset = () => {\n      setIndexOne(null);\n      setIndexTwo(null);\n      setSelectedValueOne('');\n      setSelectedValueTwo('');\n   }\n\n   if (selectedValueOne && selectedValueTwo) {\n      if (hasMatch(selectedValueOne, selectedValueTwo)) {\n         // TODO: user has found a match, show the matching pair face up\n         console.log('match');\n         reset();\n      } else {\n         console.log('no match')\n         reset();\n      }\n   }\n\n   return (\n      <div className=\"board\">\n         {children ? children : null}\n         {board.map(((data: any, i: number) => \n            <BoardItem\n               found={data.found}\n               item={data}\n               key={`board-item-${i}`}\n               onClick={onClickHandler(i)}\n            />\n         ))}\n      </div>\n   )\n}\n","import React from 'react';\nimport './App.css';\nimport { Game } from './components/Game';\nimport { Board } from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game>\n        <Board />\n      </Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}