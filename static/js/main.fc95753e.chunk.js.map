{"version":3,"sources":["components/Game.tsx","components/BoardItem.tsx","data/BoardData.ts","components/Controller.tsx","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Game","children","className","BoardItem","React","found","item","onClick","selected","value","front","type","BoardData","pairsToMatch","length","Board","useState","board","setBoard","indexOne","setIndexOne","indexTwo","setIndexTwo","matchedPairs","setMatchedPairs","selectedValueOne","setSelectedValueOne","selectedValueTwo","setSelectedValueTwo","useEffect","checkMatch","reset","Boolean","updatedBoard","map","boardItem","i","data","key","index","e","currentTarget","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc95753e.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype GameProps = {\n   children: React.ReactChild;\n}\n\nexport const Game = ({ children }: GameProps) => <div className=\"game\">{children}</div>\n","import * as React from 'react';\n\ntype BoardItemProps = {\n   found?: boolean | null;\n   item: {\n      front: string,\n      type: string,\n      value: string\n   },\n   onClick: (e: React.SyntheticEvent) => void;\n   selected?: boolean;\n}\n\nexport const BoardItem = React.memo(({ found, item, onClick, selected }: BoardItemProps) => (\n   <div\n      className={`${item.value} board__item ${found ? 'found' : ''} ${selected ? 'selected': ''}`}\n      onClick={onClick}\n   >\n      <section>\n         {item.front}\n      </section>\n      <section className={`${selected ? '' : 'hide'} card__front`}>\n         {item.type}\n         {item.value}\n      </section>\n   </div>\n));\n","export const BoardData = [\n   { value: 'rabbit', front: '9', type: 'clubs', found: false },\n   { value: 'rabbit', front: '2', type: 'diamonds', found: false },\n   { value: 'cat', front: 'Q', type: 'hearts', found: false },\n   { value: 'cat', front: '3', type: 'clubs', found: false },\n   { value: 'dog', front: 'A', type: 'diamonds', found: false },\n   { value: 'dog', front: '7', type: 'hearts', found: false },\n   { value: 'monkee', front: '7', type: 'spades', found: false },\n   { value: 'monkee', front: '6', type: 'hearts', found: false },\n   { value: 'whale', front: '7', type: 'spades', found: false },\n   { value: 'whale', front: 'J', type: 'clubs', found: false }\n]","import { BoardData } from '../data/BoardData';\n\nexport const hasMatch = (s1: string, s2: string): boolean => s1 === s2;\nexport const pairsToMatch = BoardData.length / 2;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { BoardItem } from './BoardItem';\nimport { BoardData } from '../data/BoardData';\nimport { hasMatch, pairsToMatch } from './Controller';\n\ntype BoardProps = {\n   children? : React.ReactChild;\n};\n\nexport const Board = ({ children }: BoardProps) => {\n   const [board, setBoard] = useState<any>(BoardData);\n   const [indexOne, setIndexOne] = useState<number | null>(null);\n   const [indexTwo, setIndexTwo] = useState<number | null>(null);\n   const [matchedPairs, setMatchedPairs] = useState<number>(0);\n   const [selectedValueOne, setSelectedValueOne] = useState<string>('');\n   const [selectedValueTwo, setSelectedValueTwo] = useState<string>('');\n   useEffect(() => checkMatch(), [selectedValueTwo]);\n\n   const onClickHandler = (index: number) => (e: React.SyntheticEvent) => {\n      const value = e.currentTarget.className[0];\n\n      if (!selectedValueOne) { \n         setSelectedValueOne(value);\n         setIndexOne(index);\n         return;\n      }\n      if (!selectedValueTwo) { \n         setSelectedValueTwo(value);\n         setIndexTwo(index);\n         return;\n      }\n   }\n\n   const reset = () => {\n      setIndexOne(null);\n      setIndexTwo(null);\n      setSelectedValueOne('');\n      setSelectedValueTwo('');\n   }\n\n   const checkMatch = () => {\n      if (Boolean(selectedValueOne) && Boolean(selectedValueTwo)) {\n         if (hasMatch(selectedValueOne, selectedValueTwo)) {\n            const updatedBoard = board.map((boardItem: any, i: number) => {\n               boardItem.found = i === indexOne || i === indexTwo ? true : boardItem.found;\n               return boardItem;\n            });\n            setBoard(updatedBoard);\n            setMatchedPairs(matchedPairs => matchedPairs + 1);\n            reset();\n         } else {\n            reset();\n         }\n      }\n   }\n\n   if (matchedPairs === pairsToMatch) {\n      return <p>You win!</p>;\n   }\n\n   return (\n      <div className=\"board\">\n         {children ? children : null}\n         {board.map(((data: any, i: number) => \n            <BoardItem\n               found={data.found}\n               item={data}\n               key={`board-item-${i}`}\n               onClick={onClickHandler(i)}\n               selected={i === indexOne || i === indexTwo ? true : false}\n            />\n         ))}\n      </div>\n   )\n}\n","import React from 'react';\nimport './App.scss';\nimport { Game } from './components/Game';\nimport { Board } from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game>\n        <Board />\n      </Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}